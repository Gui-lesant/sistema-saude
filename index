<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema Unidades de Sa√∫de - Vers√£o Local</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #2563eb;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --whatsapp: #25d366;
            --maps: #4285f4;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: var(--primary);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .controls {
            padding: 1.5rem;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        
        .search-box {
            margin-bottom: 1rem;
        }
        
        .search-box input {
            width: 100%;
            padding: 15px 25px;
            border: 2px solid #ddd;
            border-radius: 25px;
            font-size: 1rem;
        }
        
        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            background: var(--primary);
            color: white;
            font-weight: 600;
            font-size: 1rem;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        th {
            background: #f8f9fa;
            font-weight: 600;
            position: sticky;
            top: 0;
        }
        
        .action-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            color: white;
            font-size: 0.8rem;
            margin: 2px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }
        
        .btn-whatsapp { background: var(--whatsapp); }
        .btn-maps { background: var(--maps); }
        .btn-call { background: var(--success); }
        
        .loading { 
            padding: 3rem; 
            text-align: center; 
            color: #666;
            font-size: 1.1rem;
        }
        
        .error { 
            background: #fee2e2; 
            color: #dc2626; 
            padding: 1.5rem; 
            margin: 1rem; 
            border-radius: 10px;
            text-align: center;
        }
        
        .success {
            background: #d1fae5;
            color: #065f46;
            padding: 1rem;
            margin: 1rem;
            border-radius: 10px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-hospital"></i> Sistema Unidades de Sa√∫de</h1>
            <p>Gest√£o de unidades e contatos - Vers√£o Otimizada</p>
        </div>
        
        <div class="controls">
            <div class="search-box">
                <input type="text" id="searchInput" placeholder="üîç Buscar unidades, gerentes, telefones, endere√ßos...">
            </div>
            <div style="text-align: center;">
                <button class="btn" onclick="carregarDados()">
                    <i class="fas fa-sync"></i> Carregar Dados da Planilha
                </button>
            </div>
        </div>
        
        <div id="loading" class="loading">
            <h3>üöÄ Sistema Pronto</h3>
            <p>Clique no bot√£o acima para carregar os dados da planilha</p>
            <p><small>Se aparecer erro de CORS, use um servidor local simples</small></p>
        </div>
        
        <div id="error" class="error" style="display: none;"></div>
        <div id="success" class="success" style="display: none;"></div>
        
        <div id="tabelaContainer" style="display: none;">
            <div style="overflow-x: auto;">
                <table>
                    <thead>
                        <tr>
                            <th>Unidade</th>
                            <th>Gerente</th>
                            <th>Enfermeiro</th>
                            <th>T√©c. Enfermagem</th>
                            <th>M√©dico</th>
                            <th>Telefone</th>
                            <th>Endere√ßo</th>
                            <th>Sala Vacina</th>
                            <th>A√ß√µes</th>
                        </tr>
                    </thead>
                    <tbody id="tabelaBody"></tbody>
                </table>
            </div>
        </div>
    </div>

    <script>
        const PLANILHA_ID = '1QTPypA8lmlqeSveShPBI4HY9up6cOUcfulGDAyrP_BQ';
        let dadosOriginais = [];
        let dadosFiltrados = [];
        
        async function carregarDados() {
            try {
                mostrarLoading('üåê Conectando com a planilha...');
                document.getElementById('error').style.display = 'none';
                
                // URL alternativa que funciona melhor com CORS
                const url = `https://docs.google.com/spreadsheets/d/${PLANILHA_ID}/export?format=csv`;
                
                console.log('üì° Tentando acessar:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    mode: 'cors',
                    headers: {
                        'Content-Type': 'text/csv'
                    }
                });
                
                if (!response.ok) {
                    // Tentar m√©todo alternativo
                    await tentarMetodoAlternativo();
                    return;
                }
                
                const csv = await response.text();
                processarDados(csv);
                
            } catch (error) {
                console.error('‚ùå Erro principal:', error);
                await tentarMetodoAlternativo();
            }
        }
        
        async function tentarMetodoAlternativo() {
            try {
                mostrarLoading('üîÑ Tentando m√©todo alternativo...');
                
                // M√©todo alternativo usando JSON
                const url = `https://spreadsheets.google.com/feeds/cells/${PLANILHA_ID}/1/public/full?alt=json`;
                
                const response = await fetch(url);
                
                if (!response.ok) {
                    throw new Error(`N√£o foi poss√≠vel acessar a planilha. Verifique se ela est√° p√∫blica.`);
                }
                
                const data = await response.json();
                const csv = converterJSONparaCSV(data);
                processarDados(csv);
                
            } catch (error) {
                console.error('‚ùå Erro m√©todo alternativo:', error);
                mostrarErro(`
                    <h3>üîí Erro de Acesso</h3>
                    <p><strong>Problema:</strong> ${error.message}</p>
                    <p><strong>Solu√ß√µes:</strong></p>
                    <ol>
                        <li>Verifique se a planilha est√° p√∫blica (Compartilhar ‚Üí Qualquer um com o link pode visualizar)</li>
                        <li>Use um servidor local simples:
                            <br><code>python -m http.server 8000</code>
                            <br>Depois acesse: <code>http://localhost:8000</code>
                        </li>
                        <li>Hospede no GitHub Pages (recomendado)</li>
                    </ol>
                `);
            }
        }
        
        function converterJSONparaCSV(data) {
            // Implementa√ß√£o simplificada para converter JSON do Google Sheets para CSV
            const entries = data.feed.entry;
            const maxRow = Math.max(...entries.map(entry => parseInt(entry.gs$cell.row)));
            const maxCol = Math.max(...entries.map(entry => parseInt(entry.gs$cell.col)));
            
            let csv = '';
            for (let row = 1; row <= maxRow; row++) {
                const rowData = [];
                for (let col = 1; col <= maxCol; col++) {
                    const cell = entries.find(entry => 
                        parseInt(entry.gs$cell.row) === row && 
                        parseInt(entry.gs$cell.col) === col
                    );
                    rowData.push(cell ? `"${cell.gs$cell.$t}"` : '');
                }
                csv += rowData.join(',') + '\n';
            }
            return csv;
        }
        
        function processarDados(csv) {
            try {
                console.log('üìä Processando CSV:', csv.substring(0, 200) + '...');
                
                const dados = parseCSV(csv);
                
                if (dados.length === 0) {
                    throw new Error('Planilha vazia ou formato n√£o reconhecido');
                }
                
                dadosOriginais = dados;
                dadosFiltrados = [...dados];
                
                mostrarSucesso(`‚úÖ ${dados.length} unidades carregadas com sucesso!`);
                renderizarTabela(dados);
                configurarBusca();
                mostrarLoading(false);
                
            } catch (error) {
                mostrarErro('Erro ao processar dados: ' + error.message);
                mostrarLoading(false);
            }
        }
        
        function parseCSV(csv) {
            const linhas = csv.split('\n').filter(linha => linha.trim());
            if (linhas.length < 2) return [];
            
            const cabecalhos = linhas[0].split(',').map(h => h.replace(/^"|"$/g, '').trim());
            const dados = [];
            
            console.log('üìã Cabe√ßalhos detectados:', cabecalhos);
            
            for (let i = 1; i < linhas.length; i++) {
                const linha = linhas[i];
                if (!linha.trim()) continue;
                
                const valores = [];
                let valorAtual = '';
                let dentroDeAspas = false;
                
                for (let char of linha) {
                    if (char === '"') {
                        dentroDeAspas = !dentroDeAspas;
                    } else if (char === ',' && !dentroDeAspas) {
                        valores.push(valorAtual.replace(/^"|"$/g, ''));
                        valorAtual = '';
                    } else {
                        valorAtual += char;
                    }
                }
                valores.push(valorAtual.replace(/^"|"$/g, ''));
                
                const registro = {};
                cabecalhos.forEach((cabecalho, index) => {
                    registro[cabecalho] = valores[index] || '';
                });
                
                // S√≥ adiciona se tiver nome da unidade
                if (registro.UNIDADE && registro.UNIDADE.trim()) {
                    dados.push(registro);
                }
            }
            
            return dados;
        }
        
        function renderizarTabela(dados) {
            const tbody = document.getElementById('tabelaBody');
            
            if (dados.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" style="text-align: center;">Nenhum dado encontrado</td></tr>';
                return;
            }
            
            tbody.innerHTML = dados.map(registro => {
                const unidade = registro.UNIDADE || 'N/A';
                const gerente = registro.GERENTE || 'N/A';
                const enfermeiro = registro.ENFERMEIRO || '0';
                const tecEnfermagem = registro['TEC. ENFERMAGEM'] || '0';
                const medico = registro.MEDICO || '0';
                const telefone = registro.TELEFONE || '';
                const endereco = registro.ENDERECO || registro.ENDERE√áO || 'N/A';
                const salaVacina = registro['SALA DE VACINA ATIVA'] || '';
                
                const temWhatsapp = telefone && telefone.replace(/\D/g, '').length >= 10;
                const temMaps = endereco && endereco !== 'N/A';
                
                return `
                    <tr>
                        <td><strong>${escapeHTML(unidade)}</strong></td>
                        <td>${escapeHTML(gerente)}</td>
                        <td>${enfermeiro}</td>
                        <td>${tecEnfermagem}</td>
                        <td>${medico}</td>
                        <td>${formatarTelefone(telefone)}</td>
                        <td>${escapeHTML(endereco)}</td>
                        <td>
                            <span style="
                                padding: 4px 8px; 
                                border-radius: 12px; 
                                font-size: 0.8rem;
                                background: ${salaVacina === 'SIM' ? '#d1fae5' : '#fee2e2'};
                                color: ${salaVacina === 'SIM' ? '#065f46' : '#dc2626'};
                            ">
                                ${salaVacina || 'N/A'}
                            </span>
                        </td>
                        <td>
                            <div style="display: flex; gap: 5px; flex-wrap: wrap;">
                                ${temWhatsapp ? `
                                    <a href="https://wa.me/55${telefone.replace(/\D/g, '')}" 
                                       target="_blank" 
                                       class="action-btn btn-whatsapp">
                                        <i class="fab fa-whatsapp"></i> WhatsApp
                                    </a>
                                ` : ''}
                                ${temMaps ? `
                                    <a href="https://maps.google.com/?q=${encodeURIComponent(endereco)}" 
                                       target="_blank" 
                                       class="action-btn btn-maps">
                                        <i class="fas fa-map-marker-alt"></i> Maps
                                    </a>
                                ` : ''}
                                ${telefone ? `
                                    <a href="tel:${telefone}" 
                                       class="action-btn btn-call">
                                        <i class="fas fa-phone"></i> Ligar
                                    </a>
                                ` : ''}
                            </div>
                        </td>
                    </tr>
                `;
            }).join('');
            
            document.getElementById('tabelaContainer').style.display = 'block';
        }
        
        function configurarBusca() {
            document.getElementById('searchInput').addEventListener('input', function(e) {
                const termo = e.target.value.toLowerCase();
                
                if (!termo) {
                    dadosFiltrados = [...dadosOriginais];
                } else {
                    dadosFiltrados = dadosOriginais.filter(registro => 
                        Object.values(registro).some(valor => 
                            valor && valor.toString().toLowerCase().includes(termo)
                        )
                    );
                }
                
                renderizarTabela(dadosFiltrados);
            });
        }
        
        function formatarTelefone(telefone) {
            if (!telefone) return 'N/A';
            const numeros = telefone.replace(/\D/g, '');
            if (numeros.length === 11) {
                return numeros.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
            }
            return telefone;
        }
        
        function escapeHTML(texto) {
            if (!texto) return 'N/A';
            const div = document.createElement('div');
            div.textContent = texto;
            return div.innerHTML;
        }
        
        function mostrarLoading(mensagem) {
            const loading = document.getElementById('loading');
            if (mensagem === false) {
                loading.style.display = 'none';
            } else {
                loading.style.display = 'block';
                loading.innerHTML = `<h3>${mensagem}</h3>`;
            }
        }
        
        function mostrarErro(mensagem) {
            document.getElementById('error').innerHTML = mensagem;
            document.getElementById('error').style.display = 'block';
            mostrarLoading(false);
        }
        
        function mostrarSucesso(mensagem) {
            document.getElementById('success').textContent = mensagem;
            document.getElementById('success').style.display = 'block';
            setTimeout(() => {
                document.getElementById('success').style.display = 'none';
            }, 5000);
        }
        
        // Dica inicial
        console.log('üí° Dica: Se der erro CORS, use: python -m http.server 8000');
    </script>
</body>
</html>
